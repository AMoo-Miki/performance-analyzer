name: Java CI

on: 
  pull_request:
    branches: 
      - '*'

jobs:
  build_rca_pkg:
    strategy:
      matrix:
        java: [12]

    runs-on: [ubuntu-latest]
    name: Building Performance Analyzer package

    steps:
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Checkout Performance Analyzer
        uses: actions/checkout@v2

      - name: Checkout OpenSearch
        uses: actions/checkout@v2
        with:
          repository: 'opensearch-project/OpenSearch'
          path: OpenSearch
          ref: '1.0.0-beta1'

      - name: Build OpenSearch
        working-directory: ./OpenSearch
        run: ./gradlew publishToMavenLocal -Dbuild.version_qualifier=beta1 -Dbuild.snapshot=false -x test --info

      - name: Checkout RCA
        uses: actions/checkout@v2
        with:
          repository: 'opensearch-project/performance-analyzer-rca'
          path: performance-analyzer-rca

      - name: Build RCA
        working-directory: ./performance-analyzer-rca
        run: ./gradlew publishToMavenLocal -x test --info

      # fetch the main branch to make it available for spotless ratcheting
      - name: Fetch Performance Analyzer 'main' branch
        run: git fetch --depth=1 origin main

      - name: Update Performance Analyzer SHA for current build
        run: |
          rm -f licenses/performanceanalyzer-rca-1.0.0.0-beta1.jar.sha1
          ./gradlew updateShas --info

      # Explicitly set the docker-compose program path so that our build scripts in RCA can run the program
      # This is necessary because of the Github Actions environment and the workingDir of the Gradle environment
      - name: Set docker-compose path
        run: echo "DOCKER_COMPOSE_LOCATION=$(which docker-compose)" >> $GITHUB_ENV

      # Set the vm.max_map_count system property to the minimum required to run OpenSearch
      - name: Set vm.max_map_count
        run: sudo sysctl -w vm.max_map_count=262144

      - name: Build Performance Analyzer
        run: ./gradlew build -PrcaProjectDir=./performance-analyzer-rca --info --stacktrace

      - name: Generate Jacoco coverage report
        run: ./gradlew jacocoTestReport --info

      - name: Upload coverage report
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash) -f ./build/reports/jacoco/test/jacocoTestReport.xml

      - name: Spin up Docker cluster for integration testing
        working-directory: ./performance-analyzer-rca
        run: ./gradlew enableRca --info

      - name: Run integration tests
        run: ./gradlew integTest -Dtests.enableIT=true -Dtests.useDockerCluster=true --info
