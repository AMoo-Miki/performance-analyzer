/*
 * Copyright <2019> Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

buildscript {

    ext {
        es_version = System.getProperty("es.version", "6.5.5")
    }
    // This isn't applying from repositories.gradle so repeating it here
    repositories {

        //TODO: modify the order of evaluation, once we have artifacts in mavenCentral.
        maven {
            name = "internal-snapshots"
            url = "s3://open-es/snapshots"
            authentication {
                awsIm(AwsImAuthentication) // load from EC2 role or env var
            }
        }
        maven {
            name = "internal-releases"
            url = "s3://open-es/releases"
            authentication {
                awsIm(AwsImAuthentication) // load from EC2 role or env var
            }
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.openes.gradle:build-tools:${es_version}"
    }
}

plugins {
    id 'java'
}

allprojects {
    group = "org.openes.plugin"
    version = "1.0"
    boolean snapshot = "true".equals(System.getProperty("build.snapshot", "true"))
    if (snapshot) {
        // we update the version property to reflect if we are building a snapshot or a release build
        // we write this back out below to load it in the Build.java which will be shown in rest main action
        // to indicate this being a snapshot build or a release build.
        version += "-SNAPSHOT"
    }
}

apply plugin: 'elasticsearch.esplugin'

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}
test {
    enabled = true
}
licenseHeaders.enabled = false

esplugin {
    name 'performance-analyzer'
    description 'Performance Analyzer Plugin'
    classname 'com.amazon.opendistro.performanceanalyzer.PerformanceAnalyzerPlugin'
    version "1.0"
    publishArtifact true
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    JavaVersion targetVersion = JavaVersion.toVersion(targetCompatibility);
    if (targetVersion.isJava9Compatible()) {
        options.compilerArgs += ["--add-exports", "jdk.attach/sun.tools.attach=ALL-UNNAMED"]
    }
}

 javadoc {
     options.addStringOption("-add-exports", "jdk.attach/sun.tools.attach=ALL-UNNAMED")
}

project.afterEvaluate {
    JavaVersion targetVersion = JavaVersion.toVersion(targetCompatibility)

    // cannot contain the first version
    // should be '8' or '11' etc.
    String version = targetVersion.toString()
    if (version.length() > 2) {
        version = targetVersion.toString().substring(2)
    }

    compileJava.options.compilerArgs.removeAll(['--release', version])
}

repositories {
    mavenCentral()
}


configurations {
    includeJars
}

tasks.withType(JavaCompile) {
    options.warnings = false
}

dependencies {
    if (JavaVersion.current() <= JavaVersion.VERSION_1_8) {
        compile files("${System.properties['java.home']}/../lib/tools.jar")
    }

    compile 'org.jooq:jooq:3.10.8'
    compile 'org.xerial:sqlite-jdbc:3.8.11.2'
    compile 'com.google.guava:guava:27.0.1-jre'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.11'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.11'

    testCompile 'org.powermock:powermock-module-junit4-common:1.6.1'
    testCompile 'org.powermock:powermock-module-junit4:1.6.1'
    testCompile 'org.powermock:powermock-api-mockito:1.6.1'
    testCompile 'org.powermock:powermock-api-support:1.6.1'
    testCompile 'org.powermock:powermock-core:1.6.1'
}

dependencyLicenses {
    mapping from: /jackson-.*/, to: 'jackson'
}

dependencyLicenses.doFirst {
    updateShas.updateShas()
}

integTestRunner {
    // add "-Dtests.security.manager=false" to VM options if you want to run integ tests in IntelliJ
    systemProperty 'tests.security.manager', 'false'
    ifNoTests 'ignore'
}

bundlePlugin {
    from ("pa_config") {
        into "pa_config"
    }
    from ("pa_bin") {
        into "pa_bin"
        include "performance-analyzer-agent"
    }
    from ("pa_bin") {
        into "extensions"
        include "performance-analyzer-agent"
    }
    from ('build/resources/main/') {
        include "plugin-security.policy"
    }
    exclude ('tools.jar')
}

gradle.startParameter.excludedTaskNames += [ "forbiddenApisMain",
                                             "forbiddenApisTest",
                                             "thirdPartyAudit",
                                             "namingConventions"]

